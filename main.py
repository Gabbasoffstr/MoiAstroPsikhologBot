from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import logging, os, requests, openai
from flatlib.datetime import Datetime
from flatlib.geopos import GeoPos
from flatlib.chart import Chart
from flatlib import const
from fpdf import FPDF
from pathlib import Path
from datetime import datetime

API_TOKEN = os.getenv("API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENCAGE_API_KEY = os.getenv("OPENCAGE_API_KEY")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
openai.api_key = OPENAI_API_KEY
logging.basicConfig(level=logging.INFO)

kb = ReplyKeyboardMarkup(resize_keyboard=True)
kb.add(KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—á—ë—Ç"))

main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add("üîÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å", "üìÑ –°–∫–∞—á–∞—Ç—å PDF")
main_kb.add("üí∞ –ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç", "üìä –ü—Ä–∏–º–µ—Ä –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞")

users = {}
admin_user_id = 7943520249  # ‚Üê —Ç–≤–æ–π Telegram ID

def decimal_to_dms_str(degree, is_lat=True):
    d = int(abs(degree))
    m = int((abs(degree) - d) * 60)
    suffix = 'n' if is_lat and degree >= 0 else 's' if is_lat else 'e' if degree >= 0 else 'w'
    return f"{d}{suffix}{str(m).zfill(2)}"

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–ú–æ—è –ù–∞—Ç–∞–ª—å–Ω–∞—è –ö–∞—Ä—Ç–∞*! –£–∑–Ω–∞–π —Å–≤–æ—é —Å—É–¥—å–±—É –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è ‚ú®",
        reply_markup=kb,
        parse_mode="Markdown"
    )

@dp.message_handler(lambda m: m.text == "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—á—ë—Ç")
async def begin(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ: –î–î.–ú–ú.–ì–ì–ì–ì, –ß–ß:–ú–ú, –ì–æ—Ä–æ–¥", reply_markup=main_kb)

@dp.message_handler(lambda m: m.text == "üìä –ü—Ä–∏–º–µ—Ä –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞")
async def example_report(message: types.Message):
    try:
        example_path = "example_paid_astrology_report.pdf"
        if Path(example_path).exists():
            with open(example_path, "rb") as f:
                await message.answer_document(f)
        else:
            await message.answer("–§–∞–π–ª —Å –ø—Ä–∏–º–µ—Ä–æ–º –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message_handler(lambda m: m.text == "üìÑ –°–∫–∞—á–∞—Ç—å PDF")
async def send_pdf(message: types.Message):
    user_id = message.from_user.id
    path = f"{user_id}_chart.pdf"
    if Path(path).exists():
        with open(path, "rb") as f:
            await message.answer_document(f)
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –∫–∞—Ä—Ç—É.")

@dp.message_handler(lambda m: m.text == "üí∞ –ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç")
async def order_full_report(message: types.Message):
    if message.from_user.id == admin_user_id:
        path = f"{message.from_user.id}_full.pdf"
        if Path(path).exists():
            with open(path, "rb") as f:
                await message.answer_document(f, caption="–í–∞—à –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç üí´")
        else:
            await message.answer("–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ–∫–∞ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.")
    else:
        await message.answer("–ü–ª–∞—Ç–Ω—ã–π –æ—Ç—á—ë—Ç —Å—Ç–æ–∏—Ç 299‚ÇΩ. –û–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Å–∫–æ—Ä–æ üí≥")

@dp.message_handler()
async def handle_data(message: types.Message):
    try:
        date_str, time_str, city = [x.strip() for x in message.text.split(",")]
        birth_date = datetime.strptime(date_str, "%d.%m.%Y")
        birth_time = datetime.strptime(time_str, "%H:%M").time()

        geo_resp = requests.get(
            f"https://api.opencagedata.com/geocode/v1/json?q={city}&key={OPENCAGE_API_KEY}"
        ).json()
        coords = geo_resp["results"][0]["geometry"]
        lat, lon = coords["lat"], coords["lng"]

        date = Datetime(birth_date.strftime("%Y/%m/%d"), birth_time.strftime("%H:%M"), '+03:00')
        pos = GeoPos(decimal_to_dms_str(lat), decimal_to_dms_str(lon, is_lat=False))
        chart = Chart(date, pos)

        await message.answer(
            f"üìÖ –î–∞—Ç–∞: {date_str}, –í—Ä–µ–º—è: {time_str}, –ì–æ—Ä–æ–¥: {city}\nüåç DMS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: lat = {decimal_to_dms_str(lat)}, lon = {decimal_to_dms_str(lon, is_lat=False)}\nü™ê –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ."
        )

        lines = []
        pdf = FPDF()
        pdf.add_page()
        font_path = "DejaVuSans.ttf"
        pdf.add_font("DejaVu", "", font_path, uni=True)
        pdf.set_font("DejaVu", size=12)

        for obj in [const.SUN, const.MOON, const.MERCURY, const.VENUS, const.MARS]:
            planet = chart.get(obj)
            sign = planet.sign
            pos_deg = planet.lon
            text = f"üîç {obj.title()} –≤ {sign} {pos_deg}"
            await message.answer(text)
            prompt = f"{obj.title()} –≤ –∑–Ω–∞–∫–µ {sign}. –†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä."
            gpt_response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=300
            )
            answer = gpt_response.choices[0].message.content
            await message.answer(f"üì© GPT: {answer}")
            pdf.multi_cell(0, 10, f"{obj.title()} –≤ {sign}:\n{answer}\n")
            lines.append(f"{obj.title()} –≤ {sign}: {answer}")

        user_pdf_path = f"{message.from_user.id}_chart.pdf"
        pdf.output(user_pdf_path)

        if message.from_user.id == admin_user_id:
            full_path = f"{message.from_user.id}_full.pdf"
            pdf.output(full_path)

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
