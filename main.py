from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import logging, os, requests, openai
from flatlib.datetime import Datetime
from flatlib.geopos import GeoPos
from flatlib.chart import Chart
from fpdf import FPDF
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = os.getenv("API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENCAGE_API_KEY = os.getenv("OPENCAGE_API_KEY")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
openai.api_key = OPENAI_API_KEY
logging.basicConfig(level=logging.INFO)

kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1).add(
    KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—á—ë—Ç"),
    KeyboardButton("üìä –ü—Ä–∏–º–µ—Ä –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞")
)

main_kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1).add(
    "üîÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å", "üìÑ –°–∫–∞—á–∞—Ç—å PDF", "üí∞ –ö—É–ø–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä"
)

users = {}
admin_id = 7943520249  # —Ç–≤–æ–π Telegram ID


def decimal_to_dms_str(degree, is_lat=True):
    d = int(abs(degree))
    m = int((abs(degree) - d) * 60)
    suffix = 'n' if is_lat and degree >= 0 else 's' if is_lat else 'e' if degree >= 0 else 'w'
    return f"{d}{suffix}{str(m).zfill(2)}"


@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–ú–æ—è –ù–∞—Ç–∞–ª—å–Ω–∞—è –ö–∞—Ä—Ç–∞*! –£–∑–Ω–∞–π —Å–≤–æ—é —Å—É–¥—å–±—É –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è ‚ú®",
        reply_markup=kb,
        parse_mode="Markdown"
    )


@dp.message_handler(lambda m: m.text == "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—á—ë—Ç")
async def begin(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ: –î–î.–ú–ú.–ì–ì–ì–ì, –ß–ß:–ú–ú, –ì–æ—Ä–æ–¥", reply_markup=main_kb)


@dp.message_handler(lambda m: m.text == "üìä –ü—Ä–∏–º–µ—Ä –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞")
async def example_pdf(message: types.Message):
    try:
        with open("example_paid_astrology_report.pdf", "rb") as f:
            await message.answer_document(f)
    except:
        await message.answer("–§–∞–π–ª —Å –ø—Ä–∏–º–µ—Ä–æ–º –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")


@dp.message_handler(lambda m: m.text == "üí∞ –ö—É–ø–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä")
async def buy(message: types.Message):
    btn = InlineKeyboardMarkup().add(InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å 199‚ÇΩ", url="https://your-site.com/pay"))
    await message.answer(
        "üìé –ú—ã —É–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è —Ç–µ–±—è –ø–ª–∞—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ‚Äî –∫–∞—Ä—å–µ—Ä–∞, —Ñ–∏–Ω–∞–Ω—Å—ã, –ª—é–±–æ–≤—å, –∞—Å–ø–µ–∫—Ç—ã. –û–ø–ª–∞—Ç–∏ –∏ –ø–æ–ª—É—á–∏ PDF!",
        reply_markup=btn
    )


@dp.message_handler(lambda m: m.text == "üìÑ –°–∫–∞—á–∞—Ç—å PDF")
async def pdf(message: types.Message):
    user_id = message.from_user.id
    if user_id in users and "pdf" in users[user_id]:
        if user_id == admin_id or users[user_id].get("paid"):
            with open(users[user_id]["pdf"], "rb") as f:
                await message.answer_document(f)
        else:
            await message.answer("üîí –ü–ª–∞—Ç–Ω—ã–π –æ—Ç—á—ë—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.")
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –∫–∞—Ä—Ç—É.")


@dp.message_handler(lambda m: m.text == "üîÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å" or "," in m.text)
async def calculate(message: types.Message):
    try:
        user_id = message.from_user.id
        parts = [x.strip() for x in message.text.split(",")]
        if len(parts) != 3:
            await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì, –ß–ß:–ú–ú, –ì–æ—Ä–æ–¥")
            return

        date_str, time_str, city = parts
        await message.answer(f"üìÖ –î–∞—Ç–∞: {date_str}, –í—Ä–µ–º—è: {time_str}, –ì–æ—Ä–æ–¥: {city}")

        geo = requests.get(f"https://api.opencagedata.com/geocode/v1/json?q={city}&key={OPENCAGE_API_KEY}").json()
        if not geo.get("results"):
            await message.answer("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
            return

        lat = geo["results"][0]["geometry"].get("lat")
        lon = geo["results"][0]["geometry"].get("lng")
        lat_str = decimal_to_dms_str(lat, is_lat=True)
        lon_str = decimal_to_dms_str(lon, is_lat=False)

        await message.answer(f"üåç DMS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: lat = {lat_str}, lon = {lon_str}")

        dt = Datetime(f"{date_str[6:10]}/{date_str[3:5]}/{date_str[0:2]}", time_str, "+03:00")
        chart = Chart(dt, GeoPos(lat_str, lon_str))
        await message.answer("ü™ê –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")

        planets = ["Sun", "Moon", "Mercury", "Venus", "Mars"]
        summary = []
        for p in planets:
            obj = chart.get(p)
            sign = obj.sign
            deg = obj.lon
            await message.answer(f"üîç {p} –≤ {sign} {deg}")
            prompt = f"{p} –≤ –∑–Ω–∞–∫–µ {sign}, –¥–æ–ª–≥–æ—Ç–∞ {deg}. –î–∞–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é."
            res = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role": "user", "content": prompt}])
            gpt_reply = res.choices[0].message.content.strip()
            await message.answer(f"üì© GPT: {gpt_reply}")
            summary.append(f"{p}: {gpt_reply}\n")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        pdf = FPDF()
        pdf.add_page()
        font_path = "DejaVuSans.ttf"
        pdf.add_font("DejaVu", "", font_path, uni=True)
        pdf.set_font("DejaVu", size=12)
        for s in summary:
            pdf.multi_cell(0, 10, s)
        pdf_path = f"user_{user_id}_report.pdf"
        pdf.output(pdf_path)

        users[user_id] = {"pdf": pdf_path, "paid": (user_id == admin_id)}

        await message.answer("‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —á–∞—Å—Ç—å –≥–æ—Ç–æ–≤–∞. –•–æ—á–µ—à—å –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä ‚Äî –Ω–∞–∂–º–∏ üí∞ –ö—É–ø–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message_handler(lambda m: m.text == "üìÑ –ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç")
async def send_paid_report(message: types.Message):
    user_id = str(message.from_user.id)
    birth_data = users.get(message.from_user.id, {})
    if not birth_data.get("planets"):
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç.")
        return

    await message.answer("üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    try:
        prompt = (
            "–°–æ—Å—Ç–∞–≤—å –æ—á–µ–Ω—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞—Å—Ç—Ä–æ–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏ –ø–æ –¥–∞–Ω–Ω—ã–º –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã. "
            "–£–∫–∞–∂–∏ –∏ —Ä–∞—Å–ø–∏—à–∏ –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç:\n"
            "1. –û–±—â–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä\n"
            "2. –ú—ã—à–ª–µ–Ω–∏–µ\n"
            "3. –≠–º–æ—Ü–∏–∏\n"
            "4. –õ—é–±–æ–≤—å\n"
            "5. –≠–Ω–µ—Ä–≥–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏—è\n"
            "6. –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª\n"
            "7. –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏\n"
            "8. –ö–∞—Ä—å–µ—Ä–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª\n"
            "9. –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è\n"
            "10. –°–æ–≤–µ—Ç—ã –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è\n"
            "11. –í—Ä–æ–∂–¥–µ–Ω–Ω—ã–µ —Ç–∞–ª–∞–Ω—Ç—ã\n"
            "12. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏\n"
            "13. –ö–∞—Ä–º–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–∫–∏\n"
            "14. –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏\n"
            "15. –°–µ–º–µ–π–Ω–∞—è –∂–∏–∑–Ω—å\n"
            "16. –£—Ä–æ–≤–µ–Ω—å –¥—É—Ö–æ–≤–Ω–æ—Å—Ç–∏\n"
            "17. –¢–µ–Ω–¥–µ–Ω—Ü–∏–∏ –≤ –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω–∏\n\n"
            "–í–æ—Ç –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç:\n"
        )
        for planet, info in birth_data["planets"].items():
            prompt += f"{planet}: {info['sign']} ({info['degree']})\n"

        gpt_response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.8,
            max_tokens=2048
        )
        full_text = gpt_response.choices[0].message.content.strip()

        # PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        pdf = FPDF()
        pdf.add_page()
        font_path = "DejaVuSans.ttf"
        pdf.add_font("DejaVu", "", font_path, uni=True)
        pdf.set_font("DejaVu", size=12)
        for line in full_text.split("\n"):
            pdf.multi_cell(0, 10, line)

        paid_path = f"paid_{user_id}.pdf"
        pdf.output(paid_path)

        with open(paid_path, "rb") as f:
            await message.answer_document(f, caption="üìÑ –í–∞—à –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")
from collections import defaultdict

# –õ–∏–º–∏—Ç—ã –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (–≥–ª–æ–±–∞–ª—å–Ω–æ)
report_usage = defaultdict(int)

@dp.message_handler(lambda m: m.text == "üìÑ –ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç")
async def send_paid_report(message: types.Message):
    user_id = message.from_user.id
    max_uses = 2
    channel_username = "@Astrologiya_VIP"  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ –∏–º—è –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        member = await bot.get_chat_member(chat_id=channel_username, user_id=user_id)
        if member.status not in ["member", "administrator", "creator"]:
            await message.answer(
                "üîí –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä:\n"
                "‚Äî –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à *–ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª* üîê\n"
                "‚Äî –¢–∞–º –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
                "  ‚Ä¢ 2 –ø–æ–ª–Ω—ã—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞–∑–±–æ—Ä–∞\n"
                "  ‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ —Ç–µ–∫—É—â–∏–º –∞—Å—Ç—Ä–æ—Å–æ–±—ã—Ç–∏—è–º üåô\n\n"
                f"üëâ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å: {channel_username}",
                parse_mode="Markdown"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
        if report_usage[user_id] >= max_uses:
            await message.answer("‚õîÔ∏è –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ 2 –ø–æ–ª–Ω—ã—Ö —Ä–∞–∑–±–æ—Ä–∞. –î–ª—è –Ω–æ–≤—ã—Ö ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É.")
            return

        await message.answer("üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç...")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        planets = users.get(user_id, {}).get("planets", {})
        if not planets:
            await message.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç.")
            return

        # –ü—Ä–æ–º–ø—Ç –¥–ª—è GPT
        prompt = (
            "–°–æ—Å—Ç–∞–≤—å –û–ß–ï–ù–¨ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞—Å—Ç—Ä–æ–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –ª–∏—á–Ω–æ—Å—Ç–∏ –ø–æ –¥–∞–Ω–Ω—ã–º –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã. –£–∫–∞–∂–∏:\n"
            "1. –•–∞—Ä–∞–∫—Ç–µ—Ä\n2. –ú—ã—à–ª–µ–Ω–∏–µ\n3. –≠–º–æ—Ü–∏–∏\n4. –õ—é–±–æ–≤—å\n5. –≠–Ω–µ—Ä–≥–∏—è\n"
            "6. –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª\n7. –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏\n8. –ö–∞—Ä—å–µ—Ä–∞\n9. –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è\n"
            "10. –†–∞–∑–≤–∏—Ç–∏–µ\n11. –¢–∞–ª–∞–Ω—Ç—ã\n12. –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏\n13. –ö–∞—Ä–º–∞\n14. –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏\n"
            "15. –°–µ–º—å—è\n16. –î—É—Ö–æ–≤–Ω–æ—Å—Ç—å\n17. –õ–∏—á–Ω–∞—è –∂–∏–∑–Ω—å\n\n–î–∞–Ω–Ω—ã–µ:\n"
        )
        for planet, info in planets.items():
            prompt += f"{planet}: {info['sign']} ({round(info['degree'], 2)})\n"

        # GPT-–∑–∞–ø—Ä–æ—Å
        gpt_response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.85,
            max_tokens=2048
        )
        full_text = gpt_response.choices[0].message.content.strip()

        # PDF
        pdf = FPDF()
        pdf.add_page()
        pdf.add_font("DejaVu", "", "DejaVuSans.ttf", uni=True)
        pdf.set_font("DejaVu", size=12)
        for line in full_text.split("\n"):
            pdf.multi_cell(0, 10, line)

        paid_path = f"paid_{user_id}.pdf"
        pdf.output(paid_path)

        # –û—Ç–ø—Ä–∞–≤–∫–∞
        with open(paid_path, "rb") as f:
            await message.answer_document(f, caption="üìÑ –í–∞—à –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç")

        report_usage[user_id] += 1

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
