from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import logging, os, openai
from flatlib.datetime import Datetime
from flatlib.geopos import GeoPos
from flatlib.chart import Chart
from fpdf import FPDF
from pathlib import Path

API_TOKEN = os.getenv("API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENCAGE_API_KEY = os.getenv("OPENCAGE_API_KEY")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
openai.api_key = OPENAI_API_KEY
logging.basicConfig(level=logging.INFO)

admin_user_id = 7943520249

kb = ReplyKeyboardMarkup(resize_keyboard=True)
kb.add(KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—á—ë—Ç"))

main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add("üîÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å", "üìÑ –°–∫–∞—á–∞—Ç—å PDF")
main_kb.add("üí∞ –ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç", "üìä –ü—Ä–∏–º–µ—Ä –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞")


def generate_paid_pdf_report(user_id):
    content = [
        "üåû –°–æ–ª–Ω—Ü–µ –≤ –í–µ—Å–∞—Ö ‚Äî —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –≥–∞—Ä–º–æ–Ω–∏–∏, –¥–∏–ø–ª–æ–º–∞—Ç–∏—á–Ω–æ—Å—Ç—å, –ª—é–±–æ–≤—å –∫ –∫—Ä–∞—Å–æ—Ç–µ –∏ –±–∞–ª–∞–Ω—Å—É.",
        "üåù –õ—É–Ω–∞ –≤ –†–∞–∫–µ ‚Äî –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –∑–∞–±–æ—Ç–µ, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å.",
        "‚òø –ú–µ—Ä–∫—É—Ä–∏–π –≤ –í–µ—Å–∞—Ö ‚Äî –ª–æ–≥–∏—á–Ω–æ–µ –∏ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ, —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç–∏ –≤ —Ä–µ—á–∏.",
        "‚ôÄ –í–µ–Ω–µ—Ä–∞ –≤ –î–µ–≤–µ ‚Äî –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –∫ –ª—é–±–≤–∏, –ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö.",
        "‚ôÇ –ú–∞—Ä—Å –≤ –î–µ–≤–µ ‚Äî —Ç—Ä—É–¥–æ–ª—é–±–∏–µ, —Ç–æ—á–Ω–æ—Å—Ç—å –≤ –¥–µ–π—Å—Ç–≤–∏—è—Ö, –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞.",
        "‚ôÉ –Æ–ø–∏—Ç–µ—Ä –≤ –í–æ–¥–æ–ª–µ–µ ‚Äî –ª—é–±–æ–≤—å –∫ —Å–≤–æ–±–æ–¥–µ, —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è –≥—É–º–∞–Ω–∏–∑–º–∞, —à–∏—Ä–æ–∫–∏–π –∫—Ä—É–≥ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.",
        "‚ôÑ –°–∞—Ç—É—Ä–Ω –≤ –°—Ç—Ä–µ–ª—å—Ü–µ ‚Äî —É—Å—Ç–æ–π—á–∏–≤—ã–µ —É–±–µ–∂–¥–µ–Ω–∏—è, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ–±—É—á–µ–Ω–∏–∏.",
        "‚ö∑ –•–∏—Ä–æ–Ω –≤ –¢–µ–ª—å—Ü–µ ‚Äî –¥—É—à–µ–≤–Ω–∞—è —Ä–∞–Ω–∞, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å—é.",
        "‚ö° –ê—Å–ø–µ–∫—Ç—ã: –ú–∞—Ä—Å –∫–≤–∞–¥—Ä–∞—Ç –°–∞—Ç—É—Ä–Ω ‚Äî –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏–µ–º –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é.",
        "‚ù§Ô∏è –õ—é–±–æ–≤–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã: –í–µ–Ω–µ—Ä–∞ —Å–µ–∫—Å—Ç–∏–ª—å –õ—É–Ω–∞ ‚Äî —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –≤ –ª—é–±–≤–∏.",
        "üéØ –ö–∞—Ä–º–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞: —Ä–∞–∑–≤–∏—Ç—å —á—É–≤—Å—Ç–≤–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞ –∏ —É–º–µ–Ω–∏–µ –∏–¥—Ç–∏ –Ω–∞ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å—ã.",
        "üíº –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏: –¥–∏–ø–ª–æ–º–∞—Ç, –¥–∏–∑–∞–π–Ω–µ—Ä, –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç, –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å.",
        "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª: –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–µ–Ω –≤ —Å—Ñ–µ—Ä–µ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏—Å–∫—É—Å—Å—Ç–≤–∞."
    ]

    pdf = FPDF()
    pdf.add_page()
    pdf.add_font("DejaVu", "", "DejaVuSans.ttf", uni=True)
    pdf.set_font("DejaVu", size=12)

    for line in content:
        pdf.multi_cell(0, 10, line)

    filename = f"{user_id}_full.pdf"
    pdf.output(filename)
    return filename


@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–ú–æ—è –ù–∞—Ç–∞–ª—å–Ω–∞—è –ö–∞—Ä—Ç–∞*! –£–∑–Ω–∞–π —Å–≤–æ—é —Å—É–¥—å–±—É –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è ‚ú®",
        reply_markup=kb,
        parse_mode="Markdown"
    )

@dp.message_handler(lambda m: m.text == "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—á—ë—Ç")
async def begin(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ: –î–î.–ú–ú.–ì–ì–ì–ì, –ß–ß:–ú–ú, –ì–æ—Ä–æ–¥", reply_markup=main_kb)

@dp.message_handler(lambda m: m.text == "üìä –ü—Ä–∏–º–µ—Ä –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞")
async def example_report(message: types.Message):
    example_path = "example_paid_astrology_report.pdf"
    if Path(example_path).exists():
        with open(example_path, "rb") as f:
            await message.answer_document(f)
    else:
        await message.answer("–§–∞–π–ª —Å –ø—Ä–∏–º–µ—Ä–æ–º –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")

@dp.message_handler()
async def handle_input(message: types.Message):
    await message.answer("üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞—Å—á—ë—Ç...")

    if message.from_user.id == admin_user_id:
        pdf_path = generate_paid_pdf_report(message.from_user.id)
        if Path(pdf_path).exists():
            with open(pdf_path, "rb") as f:
                await message.answer_document(f, caption="üì© –í–æ—Ç –≤–∞—à –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç.")
        else:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF.")
    else:
        await message.answer("üÜì –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —á–∞—Å—Ç—å! –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ \"üí∞ –ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç\".")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
