from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import logging, os, requests, openai
from flatlib.datetime import Datetime
from flatlib.geopos import GeoPos
from flatlib.chart import Chart
from fpdf import FPDF
from dotenv import load_dotenv
from collections import defaultdict
from timezonefinder import TimezoneFinder
import pytz
from datetime import datetime

load_dotenv()

API_TOKEN = os.getenv("API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENCAGE_API_KEY = os.getenv("OPENCAGE_API_KEY")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
openai.api_key = OPENAI_API_KEY
logging.basicConfig(level=logging.INFO)

kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1).add(
    KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—á—ë—Ç"),
    KeyboardButton("üìä –ü—Ä–∏–º–µ—Ä –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞")
)

main_kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1).add(
    "üîÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å", "üìÑ –°–∫–∞—á–∞—Ç—å PDF", "üìÑ –ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç"
)

users = {}
report_usage = defaultdict(int)
admin_id = 7943520249
channel_id = -1002581118151

def decimal_to_dms_str(degree, is_lat=True):
    d = int(abs(degree))
    m = int((abs(degree) - d) * 60)
    suffix = 'n' if is_lat and degree >= 0 else 's' if is_lat else 'e' if degree >= 0 else 'w'
    return f"{d}{suffix}{str(m).zfill(2)}"

@dp.message_handler(lambda m: m.text == "üìÑ –ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç")
async def send_detailed_parts(message: types.Message):
    user_id = message.from_user.id
    user_data = users.get(user_id)
    if not user_data:
        await message.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Ä–∞—Å—á—ë—Ç.")
        return

    first_name = message.from_user.first_name or "–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥"
    date_str = user_data.get("date_str", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    time_str = user_data.get("time_str", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    city = user_data.get("city", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    dt_utc = user_data.get("dt_utc")
    lat = user_data.get("lat")
    lon = user_data.get("lon")
    dt_utc_str = dt_utc.strftime("%Y-%m-%d %H:%M") if dt_utc else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    planet_lines = "\n".join([
        f"{planet}: {info['sign']} ({round(info['degree'], 2)})"
        for planet, info in user_data.get("planets", {}).items()
    ])

    header = f"""
–ò–º—è: {first_name}
–î–∞—Ç–∞: {date_str}
–í—Ä–µ–º—è: {time_str}
–ì–æ—Ä–æ–¥: {city}
UTC: {dt_utc_str}
–®–∏—Ä–æ—Ç–∞: {lat}
–î–æ–ª–≥–æ—Ç–∞: {lon}
"""

    sections = [
        ("–ü–ª–∞–Ω–µ—Ç—ã", "–û–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –∫–∞–∂–¥—É—é –∏–∑ –ø–ª–∞–Ω–µ—Ç –∏ –µ—ë –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã."),
        ("–î–æ–º–∞", "–û–ø–∏—à–∏, –∫–∞–∫ –¥–æ–º–∞ –ø—Ä–æ—è–≤–ª—è—é—Ç—Å—è –≤ –∂–∏–∑–Ω–∏ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –∫–∞–∫ –æ–Ω–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—Ç —Å –ø–ª–∞–Ω–µ—Ç–∞–º–∏."),
        ("–ê—Å–ø–µ–∫—Ç—ã", "–ü—Ä–∏–¥—É–º–∞–π 3 –∑–Ω–∞—á–∏–º—ã—Ö –∞—Å–ø–µ–∫—Ç–∞ –º–µ–∂–¥—É –ø–ª–∞–Ω–µ—Ç–∞–º–∏ –∏ —Ä–∞—Å–∫—Ä–æ–π –∏—Ö —Å–º—ã—Å–ª."),
        ("–ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç", "–û–ø—Ä–µ–¥–µ–ª–∏ –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç –∏ –æ–ø–∏—à–∏, –∫–∞–∫ –æ–Ω –≤–ª–∏—è–µ—Ç –Ω–∞ –ª–∏—á–Ω–æ—Å—Ç—å –∏ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ –º–∏—Ä–∞."),
        ("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "–î–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é, –∫–∞—Ä—å–µ—Ä–µ, –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º. –ë—É–¥—å —á–µ–ª–æ–≤–µ—á–Ω—ã–º –∏ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–º."),
    ]

    for title, instruction in sections:
        prompt = f"""
–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥-–ø—Å–∏—Ö–æ–ª–æ–≥. –ò—Å–ø–æ–ª—å–∑—É–π –¥–∞–Ω–Ω—ã–µ –Ω–∏–∂–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
{header}
–ü–ª–∞–Ω–µ—Ç—ã:
{planet_lines}

–ó–∞–¥–∞—á–∞: {instruction}
        """
        try:
            res = openai.ChatCompletion.create(
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.95,
                max_tokens=2000
            )
            content = res.choices[0].message.content.strip()

            pdf = FPDF()
            pdf.add_page()
            pdf.add_font("DejaVu", "", "DejaVuSans.ttf", uni=True)
            pdf.set_font("DejaVu", size=12)
            pdf.set_auto_page_break(auto=True, margin=15)

            for paragraph in content.split("\n\n"):
                for line in paragraph.split("\n"):
                    pdf.multi_cell(0, 10, line)
                pdf.ln(3)

            filename = f"{user_id}_{title}.pdf"
            pdf.output(filename)
            with open(filename, "rb") as f:
                await message.answer_document(f, caption=f"üìò –û—Ç—á—ë—Ç: {title}")

        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {title}: {e}")

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–ú–æ—è –ù–∞—Ç–∞–ª—å–Ω–∞—è –ö–∞—Ä—Ç–∞*! –£–∑–Ω–∞–π —Å–≤–æ—é —Å—É–¥—å–±—É –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è ‚ú®",
        reply_markup=kb,
        parse_mode="Markdown"
    )


if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
