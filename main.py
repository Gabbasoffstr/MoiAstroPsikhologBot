from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import logging, os, requests, openai
from flatlib.datetime import Datetime
from flatlib.geopos import GeoPos
from flatlib.chart import Chart
from fpdf import FPDF

API_TOKEN = os.getenv("API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENCAGE_API_KEY = os.getenv("OPENCAGE_API_KEY")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
openai.api_key = OPENAI_API_KEY
logging.basicConfig(level=logging.INFO)

kb = ReplyKeyboardMarkup(resize_keyboard=True)
kb.add(KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—á—ë—Ç"))

main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add("üîÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å", "üìÑ –°–∫–∞—á–∞—Ç—å PDF", "üí∞ –ö—É–ø–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä")

users = {}

def decimal_to_dms_str(degree, is_lat=True):
    d = int(abs(degree))
    m = int((abs(degree) - d) * 60)
    suffix = 'n' if is_lat and degree >= 0 else 's' if is_lat else 'e' if degree >= 0 else 'w'
    return f"{d}{suffix}{str(m).zfill(2)}"

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–ú–æ–π –ê—Å—Ç—Ä–æ–ü—Å–∏—Ö–æ–ª–æ–≥* ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å—Å–∫–∞–∂–µ—Ç, —á—Ç–æ –∑–∞–ª–æ–∂–µ–Ω–æ –≤ —Ç–≤–æ–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ.\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üîÆ",
        reply_markup=kb,
        parse_mode="Markdown"
    )

@dp.message_handler(lambda m: m.text == "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—á—ë—Ç")
async def begin(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ: –î–î.–ú–ú.–ì–ì–ì–ì, –ß–ß:–ú–ú, –ì–æ—Ä–æ–¥", reply_markup=main_kb)

@dp.message_handler(lambda m: m.text == "üí∞ –ö—É–ø–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä")
async def buy(message: types.Message):
    btn = InlineKeyboardMarkup().add(InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å 199‚ÇΩ", url="https://your-site.com/pay"))
    await message.answer("–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–ª–Ω–æ–≥–æ PDF üîê", reply_markup=btn)

@dp.message_handler(lambda m: m.text == "üìÑ –°–∫–∞—á–∞—Ç—å PDF")
async def pdf(message: types.Message):
    user_id = message.from_user.id
    if user_id in users and "pdf" in users[user_id]:
        with open(users[user_id]["pdf"], "rb") as f:
            await message.answer_document(f)
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –∫–∞—Ä—Ç—É.")

@dp.message_handler(lambda m: m.text == "üîÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å" or "," in m.text)
async def calculate(message: types.Message):
    try:
        user_id = message.from_user.id
        parts = [x.strip() for x in message.text.split(",")]
        if len(parts) != 3:
            await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì, –ß–ß:–ú–ú, –ì–æ—Ä–æ–¥")
            return

        date_str, time_str, city = parts
        await message.answer(f"üìÖ –î–∞—Ç–∞: {date_str}, –í—Ä–µ–º—è: {time_str}, –ì–æ—Ä–æ–¥: {city}")

        geo = requests.get(f"https://api.opencagedata.com/geocode/v1/json?q={city}&key={OPENCAGE_API_KEY}").json()
        if not geo.get("results"):
            await message.answer("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
            return

        lat = geo["results"][0]["geometry"].get("lat")
        lon = geo["results"][0]["geometry"].get("lng")

        if lat is None or lon is None:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã.")
            return

        lat_str = decimal_to_dms_str(lat, is_lat=True)
        lon_str = decimal_to_dms_str(lon, is_lat=False)
        await message.answer(f"üåç DMS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: lat = {lat_str}, lon = {lon_str}")

        dt = Datetime(f"{date_str[6:10]}/{date_str[3:5]}/{date_str[0:2]}", time_str, "+03:00")
        chart = Chart(dt, GeoPos(lat_str, lon_str))
        await message.answer("ü™ê –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")

        planet_names = {
            "Sun": "–°–æ–ª–Ω—Ü–µ",
            "Moon": "–õ—É–Ω–∞",
            "Mercury": "–ú–µ—Ä–∫—É—Ä–∏–π",
            "Venus": "–í–µ–Ω–µ—Ä–∞",
            "Mars": "–ú–∞—Ä—Å"
        }

        summary = []
        for planet in planet_names:
            try:
                obj = chart.get(planet)
                await message.answer(f"üîç {planet_names[planet]} –≤ {obj.sign} {obj.lon}")
                prompt = f"{planet_names[planet]} –≤ –∑–Ω–∞–∫–µ {obj.sign}. –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞?"
                res = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[
                    {"role": "user", "content": prompt}
                ])
                gpt_reply = res.choices[0].message.content.strip()
                await message.answer(f"üì© GPT: {gpt_reply}")
                summary.append(f"{planet_names[planet]} –≤ {obj.sign}:\n{gpt_reply}\n")
            except Exception as e:
                await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {planet_names[planet]}: {e}")

        # PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        pdf = FPDF()
        pdf.add_page()
        font_path = "DejaVuSans.ttf"
        pdf.add_font("DejaVu", "", font_path, uni=True)
        pdf.set_font("DejaVu", size=12)
        for s in summary:
            pdf.multi_cell(0, 10, s)

        pdf_path = f"{user_id}_chart.pdf"  # ‚úÖ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
        pdf.output(pdf_path)

        users[user_id] = {"pdf": pdf_path}
        await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ! –ù–∞–∂–º–∏—Ç–µ üìÑ –°–∫–∞—á–∞—Ç—å PDF")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
