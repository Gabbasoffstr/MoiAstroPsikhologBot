from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import logging, os, requests, openai
from flatlib.datetime import Datetime
from flatlib.geopos import GeoPos
from flatlib.chart import Chart
from fpdf import FPDF
from dotenv import load_dotenv
from collections import defaultdict
from timezonefinder import TimezoneFinder
import pytz
from datetime import datetime

load_dotenv()

API_TOKEN = os.getenv("API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENCAGE_API_KEY = os.getenv("OPENCAGE_API_KEY")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
openai.api_key = OPENAI_API_KEY
logging.basicConfig(level=logging.INFO)

kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1).add(
    KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—á—ë—Ç"),
    KeyboardButton("üìä –ü—Ä–∏–º–µ—Ä –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞")
)

main_kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1).add(
    "üîÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å", "üìÑ –°–∫–∞—á–∞—Ç—å PDF", "üìÑ –ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç"
)

users = {}
report_usage = defaultdict(int)
admin_id = 7943520249
channel_id = -1002581118151

def decimal_to_dms_str(degree, is_lat=True):
    d = int(abs(degree))
    m = int((abs(degree) - d) * 60)
    suffix = 'n' if is_lat and degree >= 0 else 's' if is_lat else 'e' if degree >= 0 else 'w'
    return f"{d}{suffix}{str(m).zfill(2)}"

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–ú–æ—è –ù–∞—Ç–∞–ª—å–Ω–∞—è –ö–∞—Ä—Ç–∞*! –£–∑–Ω–∞–π —Å–≤–æ—é —Å—É–¥—å–±—É –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è ‚ú®",
        reply_markup=kb,
        parse_mode="Markdown"
    )

@dp.message_handler(lambda m: m.text == "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—á—ë—Ç")
async def begin(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ: –î–î.–ú–ú.–ì–ì–ì–ì, –ß–ß:–ú–ú, –ì–æ—Ä–æ–¥", reply_markup=main_kb)

@dp.message_handler(lambda m: m.text == "üìä –ü—Ä–∏–º–µ—Ä –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞")
async def example_pdf(message: types.Message):
    try:
        with open("example_paid_astrology_report.pdf", "rb") as f:
            await message.answer_document(f)
    except:
        await message.answer("\u0424\u0430\u0439\u043b \u0441 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u043c \u043f\u043e\u043a\u0430 \u043d\u0435 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d.")

@dp.message_handler(lambda m: m.text == "üìÑ –°–∫–∞—á–∞—Ç—å PDF")
async def pdf(message: types.Message):
    user_id = message.from_user.id
    if user_id in users and "pdf" in users[user_id]:
        if user_id == admin_id or users[user_id].get("paid"):
            with open(users[user_id]["pdf"], "rb") as f:
                await message.answer_document(f)
        else:
            await message.answer("üîê –ü–ª–∞—Ç–Ω—ã–π –æ—Ç—á—ë—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.")
    else:
        await message.answer("\u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u0430\u0440\u0442\u0443.")

@dp.message_handler(lambda m: m.text == "üîÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å" or "," in m.text)
async def calculate(message: types.Message):
    try:
        user_id = message.from_user.id
        parts = [x.strip() for x in message.text.split(",")]
        if len(parts) != 3:
            await message.answer("\u26a0\ufe0f \u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442. \u0412\u0432\u0435\u0434\u0438\u0442\u0435: \u0414\u0414.\u041c\u041c.\u0413\u0413\u0413\u0413, \u0427\u0427:\u041c\u041c, \u0413\u043e\u0440\u043e\u0434")
            return

        date_str, time_str, city = parts
        geo = requests.get(f"https://api.opencagedata.com/geocode/v1/json?q={city}&key={OPENCAGE_API_KEY}").json()
        if not geo.get("results"):
            await message.answer("\u274c \u0413\u043e\u0440\u043e\u0434 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d.")
            return

        lat = geo["results"][0]["geometry"]["lat"]
        lon = geo["results"][0]["geometry"]["lng"]
        lat_str = decimal_to_dms_str(lat, True)
        lon_str = decimal_to_dms_str(lon, False)

        tf = TimezoneFinder()
        timezone_str = tf.timezone_at(lat=lat, lng=lon)
        if timezone_str is None:
            await message.answer("\u274c \u041d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0447\u0430\u0441\u043e\u0432\u043e\u0439 \u043f\u043e\u044f\u0441. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0440\u043e\u0434.")
            return

        timezone = pytz.timezone(timezone_str)
        dt_input = datetime.strptime(f"{date_str} {time_str}", "%d.%m.%Y %H:%M")
        dt_local = timezone.localize(dt_input)
        dt_utc = dt_local.astimezone(pytz.utc)
        dt = Datetime(dt_utc.strftime("%Y/%m/%d"), dt_utc.strftime("%H:%M"), "+00:00")

        chart = Chart(dt, GeoPos(lat_str, lon_str))
        await message.answer("ü™ê –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞.")

        planets = ["Sun", "Moon", "Mercury", "Venus", "Mars"]
        summary = []
        for p in planets:
            obj = chart.get(p)
            sign, deg = obj.sign, obj.lon
            prompt = f"{p} –≤ –∑–Ω–∞–∫–µ {sign}, –¥–æ–ª–≥–æ—Ç–∞ {deg}. –î–∞–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é."
            res = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role": "user", "content": prompt}])
            reply = res.choices[0].message.content.strip()
            summary.append(f"{p}: {reply}\n")
            await message.answer(f"üîç {p} –≤ {sign} ‚Äî üì© {reply}")

        pdf = FPDF()
        pdf.add_page()
        pdf.add_font("DejaVu", "", "DejaVuSans.ttf", uni=True)
        pdf.set_font("DejaVu", size=12)
        for line in summary:
            pdf.multi_cell(0, 10, line)
        pdf_path = f"user_{user_id}_report.pdf"
        pdf.output(pdf_path)

        users[user_id] = {"pdf": pdf_path, "planets": {p: {"sign": chart.get(p).sign, "degree": chart.get(p).lon} for p in planets}, "paid": (user_id == admin_id)}

        await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ. –•–æ—á–µ—à—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç? –ù–∞–∂–º–∏ üìÑ –ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message_handler(lambda m: m.text == "üìÑ –ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç")
async def send_paid_report(message: types.Message):
    user_id = message.from_user.id
    max_uses = 4

    try:
        member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
        if member.status not in ["member", "administrator", "creator"]:
            await message.answer("üîí –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª.", parse_mode="Markdown")
            return

        if report_usage[user_id] >= max_uses:
            await message.answer("‚õîÔ∏è –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ 2 –ø–ª–∞—Ç–Ω—ã—Ö —Ä–∞–∑–±–æ—Ä–∞.")
            return

        planets = users.get(user_id, {}).get("planets", {})
        if not planets:
            await message.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç.")
            return

        await message.answer("üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1‚Äì2 –º–∏–Ω—É—Ç—ã.")

        planet_lines = "".join([f"{planet}: {info['sign']} ({round(info['degree'], 2)})\n" for planet, info in planets.items()])

        base_prompt = f"""
–¢—ã ‚Äî –º—É–¥—Ä—ã–π –∏ –æ–ø—ã—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ–ø—Å–∏—Ö–æ–ª–æ–≥ —Å 20-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. –°–æ—Å—Ç–∞–≤—å –ü–û–î–†–û–ë–ù–´–ô, —á–µ–ª–æ–≤–µ—á–Ω—ã–π, –≥–ª—É–±–æ–∫–∏–π –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç. –ò–∑–±–µ–≥–∞–π —à–∞–±–ª–æ–Ω–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–º–µ—Ä—ã, –º–µ—Ç–∞—Ñ–æ—Ä—ã, –æ–±—Ä–∞—â–∞–π—Å—è –∫ —á–∏—Ç–∞—Ç–µ–ª—é –ª–∏—á–Ω–æ.

–í–æ—Ç –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –ø–ª–∞–Ω–µ—Ç–∞–º:
{planet_lines}

1. –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –æ –∫–∞–∂–¥–æ–π –ø–ª–∞–Ω–µ—Ç–µ: –∫–∞–∫ –æ–Ω–∞ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è, –≤–ª–∏—è–µ—Ç –Ω–∞ –ª–∏—á–Ω–æ—Å—Ç—å, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã, –¥–∞—Ä—ã –∏ —Å–ª–∞–±–æ—Å—Ç–∏.
2. –ü—Ä–∏–¥—É–º–∞–π –ª–æ–≥–∏—á–Ω–æ –¥–æ–º–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–ª–∞–Ω–µ—Ç—ã –∏ –æ–ø–∏—à–∏, –∫–∞–∫ —ç—Ç–∏ –¥–æ–º–∞ –≤–ª–∏—è—é—Ç –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞.
3. –ü—Ä–∏–¥—É–º–∞–π 3 –∑–Ω–∞—á–∏–º—ã—Ö –∞—Å–ø–µ–∫—Ç–∞ –º–µ–∂–¥—É –ø–ª–∞–Ω–µ—Ç–∞–º–∏ –∏ —Ä–∞—Å–∫—Ä–æ–π –∏—Ö —Å–º—ã—Å–ª.
4. –û–ø—Ä–µ–¥–µ–ª–∏ –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç –∏ –µ–≥–æ –≤–ª–∏—è–Ω–∏–µ.
5. –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é, –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º, –∫–∞—Ä—å–µ—Ä–µ.
6. –ù–∞–ø–∏—à–∏ –∫—Ä–∞—Å–∏–≤–æ, –≤–¥—É–º—á–∏–≤–æ, –∫–∞–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.
        """

        res = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": base_prompt}],
            temperature=0.95,
            max_tokens=2800
        )
        full_text = res.choices[0].message.content.strip()

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
        pdf = FPDF()
        pdf.add_page()
        pdf.add_font("DejaVu", "", "DejaVuSans.ttf", uni=True)
        pdf.set_font("DejaVu", size=12)
        pdf.set_auto_page_break(auto=True, margin=15)

        for paragraph in full_text.split("\n\n"):
            for line in paragraph.split("\n"):
                pdf.multi_cell(0, 10, line)
            pdf.ln(4)

        paid_path = f"paid_{user_id}.pdf"
        pdf.output(paid_path)

        with open(paid_path, "rb") as f:
            await message.answer_document(f, caption="üìÑ –í–∞—à –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç")

        report_usage[user_id] += 1

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")

if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
