from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import logging, os, openai
from flatlib.datetime import Datetime
from flatlib.geopos import GeoPos
from flatlib.chart import Chart
from flatlib import const
from fpdf import FPDF
from pathlib import Path

# üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
API_TOKEN = os.getenv("API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–≥–µ—Ä–∞ –∏ –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# üì± –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add("üîÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å", "üìÑ –°–∫–∞—á–∞—Ç—å PDF")
main_kb.add("üìÑ –ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç", "üìä –ü—Ä–∏–º–µ—Ä –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞")

# üì¶ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users = {}

# üåê –®–∞–±–ª–æ–Ω –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
def decimal_to_dms_str(degree, is_lat=True):
    d = int(abs(degree))
    m = int((abs(degree) - d) * 60)
    suffix = 'n' if is_lat and degree >= 0 else 's' if is_lat else 'e' if degree >= 0 else 'w'
    return f"{d}{suffix}{str(m).zfill(2)}"

# ‚ñ∂Ô∏è /start
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–ú–æ—è –ù–∞—Ç–∞–ª—å–Ω–∞—è –ö–∞—Ä—Ç–∞*! –£–∑–Ω–∞–π —Å–≤–æ—é —Å—É–¥—å–±—É –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è ‚ú®", reply_markup=main_kb, parse_mode="Markdown")

# ü™ê –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç
@dp.message_handler(lambda m: m.text == "üîÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å")
async def calculate_chart(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ: –î–î.–ú–ú.–ì–ì–ì–ì, –ß–ß:–ú–ú, –ì–æ—Ä–æ–¥ (–ø—Ä–∏–º–µ—Ä: 06.10.1985, 19:15, –°—Ç–µ—Ä–ª–∏—Ç–∞–º–∞–∫)")

@dp.message_handler(lambda m: "," in m.text)
async def process_data(message: types.Message):
    try:
        user_id = str(message.from_user.id)
        date_str, time_str, city = [x.strip() for x in message.text.split(",", 2)]
        dt = Datetime(date_str.replace(".", "-"), time_str, "+03:00")
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–ø—Ä–∏–º–µ—Ä: –°—Ç–µ—Ä–ª–∏—Ç–∞–º–∞–∫)
        lat, lon = 53.63, 55.95
        pos = GeoPos(decimal_to_dms_str(lat), decimal_to_dms_str(lon, is_lat=False))
        chart = Chart(dt, pos)

        planets = {}
        for obj in [const.SUN, const.MOON, const.MERCURY, const.VENUS, const.MARS]:
            p = chart.get(obj)
            planets[obj] = {"sign": p.sign, "degree": p.lon}

        users[user_id] = {"chart": chart, "planets": planets}

        summary = []
        for name, info in planets.items():
            summary.append(f"{name.title()} –≤ {info['sign']} ({round(info['degree'], 2)})")

        await message.answer("ü™ê –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞:\n" + "\n".join(summary))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF
        pdf = FPDF()
        pdf.add_page()
        font_path = "DejaVuSans.ttf"
        pdf.add_font("DejaVu", "", font_path, uni=True)
        pdf.set_font("DejaVu", size=12)
        for line in summary:
            pdf.cell(0, 10, txt=line, ln=True)
        path = f"chart_{user_id}.pdf"
        pdf.output(path)

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# üìÑ –°–∫–∞—á–∞—Ç—å PDF
@dp.message_handler(lambda m: m.text == "üìÑ –°–∫–∞—á–∞—Ç—å PDF")
async def send_pdf(message: types.Message):
    user_id = str(message.from_user.id)
    path = f"chart_{user_id}.pdf"
    if Path(path).exists():
        with open(path, "rb") as f:
            await message.answer_document(f)
    else:
        await message.answer("–§–∞–π–ª –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π —Ä–∞—Å—á—ë—Ç.")

# üìä –ü—Ä–∏–º–µ—Ä –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞
@dp.message_handler(lambda m: m.text == "üìä –ü—Ä–∏–º–µ—Ä –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞")
async def example_report(message: types.Message):
    example_path = "example_paid_astrology_report.pdf"
    if Path(example_path).exists():
        with open(example_path, "rb") as f:
            await message.answer_document(f)
    else:
        await message.answer("–§–∞–π–ª —Å –ø—Ä–∏–º–µ—Ä–æ–º –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")

# üìÑ –ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç
@dp.message_handler(lambda m: m.text == "üìÑ –ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç")
async def send_paid_report(message: types.Message):
    user_id = str(message.from_user.id)
    birth_data = users.get(user_id, {})
    if not birth_data.get("planets"):
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç.")
        return

    await message.answer("üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    try:
        prompt = "–°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∏ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö:\n"
        for planet, info in birth_data["planets"].items():
            prompt += f"{planet}: {info['sign']} ({info['degree']})\n"

        gpt_response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        full_text = gpt_response.choices[0].message.content.strip()

        pdf = FPDF()
        pdf.add_page()
        font_path = "DejaVuSans.ttf"
        pdf.add_font("DejaVu", "", font_path, uni=True)
        pdf.set_font("DejaVu", size=12)
        for line in full_text.split("\n"):
            pdf.multi_cell(0, 10, line)

        paid_path = f"paid_{user_id}.pdf"
        pdf.output(paid_path)

        with open(paid_path, "rb") as f:
            await message.answer_document(f, caption="üìÑ –í–∞—à –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# ‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
