from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import logging, os, requests, openai
from flatlib.datetime import Datetime
from flatlib.geopos import GeoPos
from flatlib.chart import Chart
from fpdf import FPDF

API_TOKEN = os.getenv("API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENCAGE_API_KEY = os.getenv("OPENCAGE_API_KEY")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
openai.api_key = OPENAI_API_KEY
logging.basicConfig(level=logging.INFO)

# –ö–Ω–æ–ø–∫–∏
main_kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
main_kb.add(
    KeyboardButton("üîÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å"),
    KeyboardButton("üìÑ –°–∫–∞—á–∞—Ç—å PDF"),
    KeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä"),
    KeyboardButton("üìä –ü—Ä–∏–º–µ—Ä –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞")
)

users = {}

def decimal_to_dms_str(degree, is_lat=True):
    d = int(abs(degree))
    m = int((abs(degree) - d) * 60)
    suffix = 'n' if is_lat and degree >= 0 else 's' if is_lat else 'e' if degree >= 0 else 'w'
    return f"{d}{suffix}{str(m).zfill(2)}"

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–ú–æ—è –ù–∞—Ç–∞–ª—å–Ω–∞—è –ö–∞—Ä—Ç–∞*! –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç –∏ –æ–±—ä—è—Å–Ω–∏—Ç, —á—Ç–æ –∑–∞–ª–æ–∂–µ–Ω–æ –≤ —Ç–≤–æ–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ.\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üîÆ",
        reply_markup=main_kb,
        parse_mode="Markdown"
    )

@dp.message_handler(lambda m: m.text == "üîÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å" or "," in m.text)
async def calculate(message: types.Message):
    try:
        user_id = message.from_user.id
        parts = [x.strip() for x in message.text.split(",")]
        if len(parts) != 3:
            await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì, –ß–ß:–ú–ú, –ì–æ—Ä–æ–¥")
            return

        date_str, time_str, city = parts
        await message.answer(f"üìÖ –î–∞—Ç–∞: {date_str}, –í—Ä–µ–º—è: {time_str}, –ì–æ—Ä–æ–¥: {city}")

        geo = requests.get(f"https://api.opencagedata.com/geocode/v1/json?q={city}&key={OPENCAGE_API_KEY}").json()
        if not geo.get("results"):
            await message.answer("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π.")
            return

        lat = geo["results"][0]["geometry"].get("lat")
        lon = geo["results"][0]["geometry"].get("lng")

        lat_str = decimal_to_dms_str(lat, is_lat=True)
        lon_str = decimal_to_dms_str(lon, is_lat=False)
        await message.answer(f"üåç DMS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: lat = {lat_str}, lon = {lon_str}")

        dt = Datetime(f"{date_str[6:10]}/{date_str[3:5]}/{date_str[0:2]}", time_str, "+03:00")
        chart = Chart(dt, GeoPos(lat_str, lon_str))
        await message.answer("ü™ê –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")

        planets = ["Sun", "Moon", "Mercury", "Venus", "Mars"]
        summary = []

        for p in planets:
            obj = chart.get(p)
            await message.answer(f"üîç {p} –≤ {obj.sign} {obj.lon}")
            try:
                prompt = f"{p} –≤ –∑–Ω–∞–∫–µ {obj.sign}, –¥–æ–ª–≥–æ—Ç–∞ {obj.lon}. –ê—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞?"
                res = openai.ChatCompletion.create(model="gpt-3.5-turbo", messages=[{"role": "user", "content": prompt}])
                gpt_reply = res.choices[0].message.content.strip()
                await message.answer(f"üì© GPT: {gpt_reply}")
                summary.append(f"{p}: {gpt_reply}\n")
            except Exception as e:
                await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {p}: {e}")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        pdf = FPDF()
        pdf.add_page()
        pdf.add_font("DejaVu", "", "DejaVuSans.ttf", uni=True)
        pdf.set_font("DejaVu", size=12)
        for s in summary:
            pdf.multi_cell(0, 10, s)
        pdf_path = f"{user_id}_chart.pdf"
        pdf.output(pdf_path)

        users[user_id] = {"pdf": pdf_path}
        await message.answer("‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ—Ç—á—ë—Ç –≥–æ—Ç–æ–≤! –í—ã –º–æ–∂–µ—Ç–µ:\n- üìÑ –°–∫–∞—á–∞—Ç—å PDF\n- üí∞ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä\n- üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞", reply_markup=main_kb)

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message_handler(lambda m: m.text == "üìÑ –°–∫–∞—á–∞—Ç—å PDF")
async def send_pdf(message: types.Message):
    user_id = message.from_user.id
    if user_id in users and os.path.exists(users[user_id]["pdf"]):
        with open(users[user_id]["pdf"], "rb") as f:
            await message.answer_document(f)
    else:
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É.")

@dp.message_handler(lambda m: m.text == "üí∞ –ö—É–ø–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ä–∞–∑–±–æ—Ä")
async def buy(message: types.Message):
    btn = InlineKeyboardMarkup().add(InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å 199‚ÇΩ", url="https://your-site.com/pay"))
    await message.answer("üîí –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø–ª–∞—Ç–Ω—ã–π –æ—Ç—á—ë—Ç ‚Äî —ç—Ç–æ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–æ–≤, —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, —Ñ–∏–Ω–∞–Ω—Å—ã –∏ –∫–∞—Ä—å–µ—Ä–∞.\n\nüëâ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å:", reply_markup=btn)

@dp.message_handler(lambda m: m.text == "üìä –ü—Ä–∏–º–µ—Ä –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞")
async def show_example(message: types.Message):
    await message.answer(
        "üìä *–ü—Ä–∏–º–µ—Ä –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞:*\n\n"
        "üåû –°–æ–ª–Ω—Ü–µ –≤ –í–µ—Å–∞—Ö ‚Äî —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –≥–∞—Ä–º–æ–Ω–∏–∏, –¥–∏–ø–ª–æ–º–∞—Ç–∏—á–Ω–æ—Å—Ç—å, –ª—é–±–æ–≤—å –∫ –∫—Ä–∞—Å–æ—Ç–µ –∏ –±–∞–ª–∞–Ω—Å—É.\n"
        "üåù –õ—É–Ω–∞ –≤ –†–∞–∫–µ ‚Äî —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –∑–∞–±–æ—Ç–µ, —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.\n"
        "‚òø –ú–µ—Ä–∫—É—Ä–∏–π –≤ –í–µ—Å–∞—Ö ‚Äî –ª–æ–≥–∏—á–Ω–æ—Å—Ç—å, –¥–∏–ø–ª–æ–º–∞—Ç–∏—è, —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏.\n"
        "‚ôÄ –í–µ–Ω–µ—Ä–∞ –≤ –î–µ–≤–µ ‚Äî –ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º –≤ –ª—é–±–≤–∏, –∞–Ω–∞–ª–∏–∑ —á—É–≤—Å—Ç–≤.\n"
        "‚ôÇ –ú–∞—Ä—Å –≤ –î–µ–≤–µ ‚Äî —Ü–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª—ë–Ω–Ω–æ—Å—Ç—å, –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞.\n"
        "‚ôÉ –Æ–ø–∏—Ç–µ—Ä –≤ –í–æ–¥–æ–ª–µ–µ ‚Äî –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ, –≥—É–º–∞–Ω–∏–∑–º.\n"
        "‚ôÑ –°–∞—Ç—É—Ä–Ω –≤ –°—Ç—Ä–µ–ª—å—Ü–µ ‚Äî —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∞—è —Å—Ç—Ä–æ–≥–æ—Å—Ç—å, —Ç—è–≥–∞ –∫ –∑–Ω–∞–Ω–∏—é.\n"
        "‚ù§Ô∏è –õ—é–±–æ–≤–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã: –í–µ–Ω–µ—Ä–∞ —Å–µ–∫—Å—Ç–∏–ª—å –õ—É–Ω–∞ ‚Äî —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö.\n"
        "üéØ –ö–∞—Ä–º–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞: —Ä–∞–∑–≤–∏—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ –Ω–∞—É—á–∏—Ç—å—Å—è –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å—Å—è.",
        parse_mode="Markdown"
    )

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
