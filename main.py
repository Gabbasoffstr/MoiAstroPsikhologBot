from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import logging, os, requests, openai
from flatlib.datetime import Datetime
from flatlib.geopos import GeoPos
from flatlib.chart import Chart
from fpdf import FPDF
from dotenv import load_dotenv
from timezonefinder import TimezoneFinder
import pytz
from datetime import datetime

load_dotenv()

# Initialize bot and configurations
bot = Bot(token=os.getenv("API_TOKEN"))
dp = Dispatcher(bot)
openai.api_key = os.getenv("OPENAI_API_KEY")
logging.basicConfig(level=logging.INFO)

# Keyboards
kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1).add(
    KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—á—ë—Ç"),
    KeyboardButton("üìä –ü—Ä–∏–º–µ—Ä –ø–ª–∞—Ç–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞")
)

main_kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1).add(
    "üîÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å", "üìÑ –°–∫–∞—á–∞—Ç—å PDF", "üìÑ –ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç"
)

# User data storage
users = {}

def decimal_to_dms_str(degree, is_lat=True):
    """Convert decimal coordinates to DMS format string."""
    d = int(abs(degree))
    m = int((abs(degree) - d) * 60)
    suffix = 'n' if is_lat and degree >= 0 else 's' if is_lat else 'e' if degree >= 0 else 'w'
    return f"{d}{suffix}{str(m).zfill(2)}"

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    """Handle the /start command."""
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–ú–æ—è –ù–∞—Ç–∞–ª—å–Ω–∞—è –ö–∞—Ä—Ç–∞*! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞—Å—á—ë—Ç.",
        reply_markup=kb,
        parse_mode="Markdown"
    )

@dp.message_handler(lambda m: m.text == "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—á—ë—Ç")
async def begin(message: types.Message):
    """Begin the calculation process."""
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì, –ß–ß:–ú–ú, –ì–æ—Ä–æ–¥", reply_markup=main_kb)

@dp.message_handler(lambda m: m.text == "üìÑ –°–∫–∞—á–∞—Ç—å PDF")
async def pdf(message: types.Message):
    """Send the PDF report if available."""
    user_id = message.from_user.id
    if user_id in users and "pdf" in users[user_id]:
        try:
            with open(users[user_id]["pdf"], "rb") as f:
                await message.answer_document(f)
        except FileNotFoundError:
            await message.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç.")
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –∫–∞—Ä—Ç—É.")

@dp.message_handler(lambda m: m.text == "üîÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å" or "," in m.text)
async def calculate(message: types.Message):
    """Calculate the natal chart."""
    try:
        user_id = message.from_user.id
        parts = [x.strip() for x in message.text.split(",")]
        
        if len(parts) != 3:
            await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì, –ß–ß:–ú–ú, –ì–æ—Ä–æ–¥")
            return

        date_str, time_str, city = parts
        
        # Validate date and time
        try:
            datetime.strptime(date_str, "%d.%m.%Y")
            datetime.strptime(time_str, "%H:%M")
        except ValueError:
            await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –∏ –ß–ß:–ú–ú")
            return

        # Get geolocation
        geo_response = requests.get(
            f"https://api.opencagedata.com/geocode/v1/json?q={city}&key={os.getenv('OPENCAGE_API_KEY')}"
        )
        geo = geo_response.json()
        
        if not geo.get("results"):
            await message.answer("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
            return

        lat = geo["results"][0]["geometry"]["lat"]
        lon = geo["results"][0]["geometry"]["lng"]
        lat_str = decimal_to_dms_str(lat, True)
        lon_str = decimal_to_dms_str(lon, False)

        # Get timezone
        tf = TimezoneFinder()
        timezone_str = tf.timezone_at(lat=lat, lng=lon)
        if timezone_str is None:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥ —Ä—è–¥–æ–º.")
            return

        timezone = pytz.timezone(timezone_str)
        dt_input = datetime.strptime(f"{date_str} {time_str}", "%d.%m.%Y %H:%M")
        
        try:
            dt_local = timezone.localize(dt_input)
        except pytz.exceptions.AmbiguousTimeError:
            await message.answer("‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è (–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ª–µ—Ç–Ω–µ–µ –≤—Ä–µ–º—è). –£—Ç–æ—á–Ω–∏—Ç–µ –≤—Ä–µ–º—è.")
            return
            
        dt_utc = dt_local.astimezone(pytz.utc)
        dt = Datetime(dt_utc.strftime("%Y/%m/%d"), dt_utc.strftime("%H:%M"), "+00:00")

        # Create chart
        chart = Chart(dt, GeoPos(lat_str, lon_str))

        # Prepare planet data
        planet_names = ["Sun", "Moon", "Mercury", "Venus", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune", "Pluto"]
        summary = []
        for p in planet_names:
            obj = chart.get(p)
            summary.append(f"{p}: {obj.sign}, {round(obj.lon, 2)}¬∞, –¥–æ–º {obj.house}")

        # Generate PDF
        pdf = FPDF()
        pdf.add_page()
        try:
            pdf.add_font("DejaVu", "", "DejaVuSans.ttf", uni=True)
            pdf.set_font("DejaVu", size=12)
        except:
            pdf.set_font("Arial", size=12)  # Fallback font
            
        for line in summary:
            pdf.multi_cell(0, 10, line)
        
        pdf_path = f"user_{user_id}_report.pdf"
        pdf.output(pdf_path)

        # Store user data
        users[user_id] = {
            "pdf": pdf_path,
            "planets": {
                p: {
                    "sign": chart.get(p).sign,
                    "degree": chart.get(p).lon,
                    "house": chart.get(p).house
                } for p in planet_names
            },
            "lat": lat,
            "lon": lon,
            "city": city,
            "date_str": date_str,
            "time_str": time_str,
            "dt_utc": dt_utc
        }

        await message.answer("‚úÖ –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å üìÑ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç.")
        
    except Exception as e:
        logging.error(f"Error in calculate: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message_handler(lambda m: m.text == "üìÑ –ó–∞–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç")
async def send_detailed_parts(message: types.Message):
    """Generate and send detailed reports."""
    user_id = message.from_user.id
    user_data = users.get(user_id)
    
    if not user_data:
        await message.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Ä–∞—Å—á—ë—Ç –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã.")
        return

    first_name = message.from_user.first_name or "–î–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥"
    date_str = user_data["date_str"]
    time_str = user_data["time_str"]
    city = user_data["city"]
    dt_utc_str = user_data["dt_utc"].strftime("%Y-%m-%d %H:%M")
    lat = user_data["lat"]
    lon = user_data["lon"]

    planet_lines = "\n".join([
        f"{p}: {info['sign']} ({round(info['degree'], 2)}¬∞), –¥–æ–º: {info['house']}"
        for p, info in user_data["planets"].items()
    ])

    header = f"""
–ò–º—è: {first_name}
–î–∞—Ç–∞: {date_str}
–í—Ä–µ–º—è: {time_str}
–ì–æ—Ä–æ–¥: {city}
UTC: {dt_utc_str}
–®–∏—Ä–æ—Ç–∞: {lat}
–î–æ–ª–≥–æ—Ç–∞: {lon}
–ü–ª–∞–Ω–µ—Ç—ã:
{planet_lines}
"""

    sections = [
        ("–ü–ª–∞–Ω–µ—Ç—ã", "–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏ –≤–ª–∏—è–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç –Ω–∞ –ª–∏—á–Ω–æ—Å—Ç—å, –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã, –¥–∞—Ä—ã."),
        ("–î–æ–º–∞", "–†–∞—Å–ø–∏—à–∏, –∫–∞–∫ –¥–æ–º–∞ –≤–ª–∏—è—é—Ç –Ω–∞ –∂–∏–∑–Ω—å, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ —Å–æ—á–µ—Ç–∞–Ω–∏–∏ —Å –ø–ª–∞–Ω–µ—Ç–∞–º–∏."),
        ("–ê—Å–ø–µ–∫—Ç—ã", "–û–ø–∏—à–∏ —Ç—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ –∑–Ω–∞—á–∏–º—ã—Ö –∞—Å–ø–µ–∫—Ç–∞ –º–µ–∂–¥—É –ø–ª–∞–Ω–µ—Ç–∞–º–∏."),
        ("–ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç", "–û–ø—Ä–µ–¥–µ–ª–∏ –∏ –æ—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–π –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç –∏ –µ–≥–æ –≤–ª–∏—è–Ω–∏–µ."),
        ("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "–î–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é, –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º –∏ –∫–∞—Ä—å–µ—Ä–µ."),
    ]

    for title, instruction in sections:
        try:
            prompt = f"""
–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥-–ø—Å–∏—Ö–æ–ª–æ–≥. –°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö:

{header}

–ó–∞–¥–∞—á–∞: {instruction}

–ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º, –Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–º. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã, –Ω–æ –æ–±—ä—è—Å–Ω—è–π –∏—Ö.
            """

            res = openai.ChatCompletion.create(
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.7,
                max_tokens=1500
            )
            content = res.choices[0].message.content.strip()

            pdf = FPDF()
            pdf.add_page()
            try:
                pdf.add_font("DejaVu", "", "DejaVuSans.ttf", uni=True)
                pdf.set_font("DejaVu", size=12)
            except:
                pdf.set_font("Arial", size=12)
                
            pdf.multi_cell(0, 10, f"–û—Ç—á—ë—Ç: {title}\n\n")
            for paragraph in content.split("\n\n"):
                pdf.multi_cell(0, 10, paragraph)
                pdf.ln(5)

            filename = f"detailed_{user_id}_{title}.pdf"
            pdf.output(filename)
            
            with open(filename, "rb") as f:
                await message.answer_document(f, caption=f"üìò {title}")
                
        except Exception as e:
            logging.error(f"Error generating {title}: {e}")
            await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª '{title}'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)